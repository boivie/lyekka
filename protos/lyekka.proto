package Lyekka.pb;
option optimize_for = SPEED;

//------------

message TreeRef {
  required string name = 1;     // The name of the directory (basename)
  required int32 mode = 2;      // Unix mode, but in decimal form.
  required int64 mtime = 3;     // The modification time, in unix timestamp
  optional int32 mtime_ns = 4;  // Nanosecond part of the mtime
  required int32 sha_idx = 5;
  optional bytes key = 6;
  
  extensions 1000 to 1999;
}

enum Encryption { 
  AES_128_CBC = 1;
}

enum Compression {
  ZLIB = 0;
  NONE = 1;
}

message Part {
  optional uint64 offset = 1;  
  required uint32 size = 2;    // The size of the (possibly encrypted) data 
  required int32 sha_idx = 3;  // The index to the refs table
  optional bytes key = 4;      // The encryption key + iv
  optional Compression compression = 5 [default = ZLIB];
  extensions 1000 to 1999;
}

message FileEntry {
  required string name = 1; 
  required int32 mode = 2;      
  required uint64 size = 3; 
  required int64 mtime = 4; 
  optional int32 mtime_ns = 5;

  repeated Part parts = 6; // Note: parts may be missing.  
}

message Tree {
  // NOTE: The 'subdirs' and 'files' are sorted by name, ascending, using memcmp()
  // NOTE: Only files where at least one chunk is available, and trees where atleast one child
  // has a chunk available are present. The rest are not present at all, and the index will instead
  // inform how complete it is.
  repeated TreeRef subdirs = 1;
  repeated FileEntry files = 2;
}

// ----------------

message Property {
  required string key = 1;
  optional string str_val = 2;
}

message Properties {
  repeated Property properties = 1;
}

message SecureProperties {
  repeated Property properties = 1;
  /* The key used to decrypt the entry point */
  optional bytes entry_point_key = 2;
}

message Pbkdf2Key {
  /* Perform PBKDF2 on the provided passphrase and salt,
   * for 'iterations' iterations.
   * Truncate the result to 128 bits, and decrypt 'key'
   * using AES-128-CBC with the provided IV. The result
   * is the key which encrypted_data is encrypted with
   */
  required bytes salt = 1;
  optional int32 iterations = 2 [default = 4096];
  required bytes iv = 3;
  required bytes key = 4;
}

message PgpKey {
  optional string key_id = 1;
  required bytes encrypted_key = 2;
}

message EncryptedProperties {
  /* An encrypted 'SecureProperties' protocol buffer */
  required bytes encrypted_data = 1;
  required bytes iv = 2;
  optional Encryption algorithm = 3 [default = AES_128_CBC];

  /* Different ways to unlock the key used for encrypting 'encrypted_data',
   * referred from here on as "the key"
   */

  /* Indicates that the key can be retrieved by applying the 
   * PBKDF2 algorithm on a user-provided passphrase.
   */
  optional Pbkdf2Key password_key = 4;

  /* The key is in turn encrypted using a public key, and can be unlocked
   * by having the matching private key.
   */
  optional PgpKey pgp_encrypted_key = 5; 
}

message Manifest {
  /* Publicly shown properties */
  optional Properties properties = 1;

  /* Secure properties */
  optional EncryptedProperties secure_properties = 2;
}

message Signature {
  optional bytes signature = 1;
}

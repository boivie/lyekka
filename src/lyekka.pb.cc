// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lyekka.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Lyekka {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* TreeRef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreeRef_reflection_ = NULL;
const ::google::protobuf::Descriptor* Part_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Part_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tree_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tree_reflection_ = NULL;
const ::google::protobuf::Descriptor* Property_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Property_reflection_ = NULL;
const ::google::protobuf::Descriptor* Properties_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Properties_reflection_ = NULL;
const ::google::protobuf::Descriptor* SecureProperties_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecureProperties_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pbkdf2Key_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pbkdf2Key_reflection_ = NULL;
const ::google::protobuf::Descriptor* PgpKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PgpKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* EncryptedProperties_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EncryptedProperties_reflection_ = NULL;
const ::google::protobuf::Descriptor* Manifest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Manifest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Signature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Signature_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Encryption_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Compression_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_lyekka_2eproto() {
  protobuf_AddDesc_lyekka_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lyekka.proto");
  GOOGLE_CHECK(file != NULL);
  TreeRef_descriptor_ = file->message_type(0);
  static const int TreeRef_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeRef, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeRef, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeRef, mtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeRef, mtime_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeRef, sha_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeRef, key_),
  };
  TreeRef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreeRef_descriptor_,
      TreeRef::default_instance_,
      TreeRef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeRef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeRef, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeRef, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreeRef));
  Part_descriptor_ = file->message_type(1);
  static const int Part_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Part, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Part, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Part, sha_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Part, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Part, compression_),
  };
  Part_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Part_descriptor_,
      Part::default_instance_,
      Part_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Part, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Part, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Part, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Part));
  FileEntry_descriptor_ = file->message_type(2);
  static const int FileEntry_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileEntry, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileEntry, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileEntry, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileEntry, mtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileEntry, mtime_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileEntry, parts_),
  };
  FileEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileEntry_descriptor_,
      FileEntry::default_instance_,
      FileEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileEntry));
  Tree_descriptor_ = file->message_type(3);
  static const int Tree_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tree, subdirs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tree, files_),
  };
  Tree_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tree_descriptor_,
      Tree::default_instance_,
      Tree_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tree, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tree, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tree));
  Property_descriptor_ = file->message_type(4);
  static const int Property_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, str_val_),
  };
  Property_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Property_descriptor_,
      Property::default_instance_,
      Property_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Property));
  Properties_descriptor_ = file->message_type(5);
  static const int Properties_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties, properties_),
  };
  Properties_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Properties_descriptor_,
      Properties::default_instance_,
      Properties_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Properties));
  SecureProperties_descriptor_ = file->message_type(6);
  static const int SecureProperties_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecureProperties, properties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecureProperties, entry_point_key_),
  };
  SecureProperties_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecureProperties_descriptor_,
      SecureProperties::default_instance_,
      SecureProperties_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecureProperties, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecureProperties, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecureProperties));
  Pbkdf2Key_descriptor_ = file->message_type(7);
  static const int Pbkdf2Key_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pbkdf2Key, salt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pbkdf2Key, iterations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pbkdf2Key, iv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pbkdf2Key, key_),
  };
  Pbkdf2Key_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pbkdf2Key_descriptor_,
      Pbkdf2Key::default_instance_,
      Pbkdf2Key_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pbkdf2Key, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pbkdf2Key, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pbkdf2Key));
  PgpKey_descriptor_ = file->message_type(8);
  static const int PgpKey_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PgpKey, key_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PgpKey, encrypted_key_),
  };
  PgpKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PgpKey_descriptor_,
      PgpKey::default_instance_,
      PgpKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PgpKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PgpKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PgpKey));
  EncryptedProperties_descriptor_ = file->message_type(9);
  static const int EncryptedProperties_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedProperties, encrypted_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedProperties, iv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedProperties, algorithm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedProperties, password_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedProperties, pgp_encrypted_key_),
  };
  EncryptedProperties_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EncryptedProperties_descriptor_,
      EncryptedProperties::default_instance_,
      EncryptedProperties_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedProperties, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedProperties, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EncryptedProperties));
  Manifest_descriptor_ = file->message_type(10);
  static const int Manifest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Manifest, properties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Manifest, secure_properties_),
  };
  Manifest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Manifest_descriptor_,
      Manifest::default_instance_,
      Manifest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Manifest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Manifest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Manifest));
  Signature_descriptor_ = file->message_type(11);
  static const int Signature_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signature, signature_),
  };
  Signature_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Signature_descriptor_,
      Signature::default_instance_,
      Signature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signature, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signature, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Signature));
  Encryption_descriptor_ = file->enum_type(0);
  Compression_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lyekka_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreeRef_descriptor_, &TreeRef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Part_descriptor_, &Part::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileEntry_descriptor_, &FileEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tree_descriptor_, &Tree::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Property_descriptor_, &Property::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Properties_descriptor_, &Properties::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecureProperties_descriptor_, &SecureProperties::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pbkdf2Key_descriptor_, &Pbkdf2Key::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PgpKey_descriptor_, &PgpKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EncryptedProperties_descriptor_, &EncryptedProperties::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Manifest_descriptor_, &Manifest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Signature_descriptor_, &Signature::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lyekka_2eproto() {
  delete TreeRef::default_instance_;
  delete TreeRef_reflection_;
  delete Part::default_instance_;
  delete Part_reflection_;
  delete FileEntry::default_instance_;
  delete FileEntry_reflection_;
  delete Tree::default_instance_;
  delete Tree_reflection_;
  delete Property::default_instance_;
  delete Property_reflection_;
  delete Properties::default_instance_;
  delete Properties_reflection_;
  delete SecureProperties::default_instance_;
  delete SecureProperties_reflection_;
  delete Pbkdf2Key::default_instance_;
  delete Pbkdf2Key_reflection_;
  delete PgpKey::default_instance_;
  delete PgpKey_reflection_;
  delete EncryptedProperties::default_instance_;
  delete EncryptedProperties_reflection_;
  delete Manifest::default_instance_;
  delete Manifest_reflection_;
  delete Signature::default_instance_;
  delete Signature_reflection_;
}

void protobuf_AddDesc_lyekka_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014lyekka.proto\022\tLyekka.pb\"l\n\007TreeRef\022\014\n\004"
    "name\030\001 \002(\t\022\014\n\004mode\030\002 \002(\005\022\r\n\005mtime\030\003 \002(\003\022"
    "\020\n\010mtime_ns\030\004 \001(\005\022\017\n\007sha_idx\030\005 \002(\005\022\013\n\003ke"
    "y\030\006 \001(\014*\006\010\350\007\020\320\017\"}\n\004Part\022\016\n\006offset\030\001 \001(\004\022"
    "\014\n\004size\030\002 \002(\r\022\017\n\007sha_idx\030\003 \002(\005\022\013\n\003key\030\004 "
    "\001(\014\0221\n\013compression\030\005 \001(\0162\026.Lyekka.pb.Com"
    "pression:\004ZLIB*\006\010\350\007\020\320\017\"v\n\tFileEntry\022\014\n\004n"
    "ame\030\001 \002(\t\022\014\n\004mode\030\002 \002(\005\022\014\n\004size\030\003 \002(\004\022\r\n"
    "\005mtime\030\004 \002(\003\022\020\n\010mtime_ns\030\005 \001(\005\022\036\n\005parts\030"
    "\006 \003(\0132\017.Lyekka.pb.Part\"P\n\004Tree\022#\n\007subdir"
    "s\030\001 \003(\0132\022.Lyekka.pb.TreeRef\022#\n\005files\030\002 \003"
    "(\0132\024.Lyekka.pb.FileEntry\"(\n\010Property\022\013\n\003"
    "key\030\001 \002(\t\022\017\n\007str_val\030\002 \001(\t\"5\n\nProperties"
    "\022\'\n\nproperties\030\001 \003(\0132\023.Lyekka.pb.Propert"
    "y\"T\n\020SecureProperties\022\'\n\nproperties\030\001 \003("
    "\0132\023.Lyekka.pb.Property\022\027\n\017entry_point_ke"
    "y\030\002 \001(\014\"L\n\tPbkdf2Key\022\014\n\004salt\030\001 \002(\014\022\030\n\nit"
    "erations\030\002 \001(\005:\0044096\022\n\n\002iv\030\003 \002(\014\022\013\n\003key\030"
    "\004 \002(\014\"/\n\006PgpKey\022\016\n\006key_id\030\001 \001(\t\022\025\n\rencry"
    "pted_key\030\002 \002(\014\"\312\001\n\023EncryptedProperties\022\026"
    "\n\016encrypted_data\030\001 \002(\014\022\n\n\002iv\030\002 \002(\014\0225\n\tal"
    "gorithm\030\003 \001(\0162\025.Lyekka.pb.Encryption:\013AE"
    "S_128_CBC\022*\n\014password_key\030\004 \001(\0132\024.Lyekka"
    ".pb.Pbkdf2Key\022,\n\021pgp_encrypted_key\030\005 \001(\013"
    "2\021.Lyekka.pb.PgpKey\"p\n\010Manifest\022)\n\nprope"
    "rties\030\001 \001(\0132\025.Lyekka.pb.Properties\0229\n\021se"
    "cure_properties\030\002 \001(\0132\036.Lyekka.pb.Encryp"
    "tedProperties\"\036\n\tSignature\022\021\n\tsignature\030"
    "\001 \001(\014*\035\n\nEncryption\022\017\n\013AES_128_CBC\020\001*!\n\013"
    "Compression\022\010\n\004ZLIB\020\000\022\010\n\004NONE\020\001B\002H\001", 1195);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lyekka.proto", &protobuf_RegisterTypes);
  TreeRef::default_instance_ = new TreeRef();
  Part::default_instance_ = new Part();
  FileEntry::default_instance_ = new FileEntry();
  Tree::default_instance_ = new Tree();
  Property::default_instance_ = new Property();
  Properties::default_instance_ = new Properties();
  SecureProperties::default_instance_ = new SecureProperties();
  Pbkdf2Key::default_instance_ = new Pbkdf2Key();
  PgpKey::default_instance_ = new PgpKey();
  EncryptedProperties::default_instance_ = new EncryptedProperties();
  Manifest::default_instance_ = new Manifest();
  Signature::default_instance_ = new Signature();
  TreeRef::default_instance_->InitAsDefaultInstance();
  Part::default_instance_->InitAsDefaultInstance();
  FileEntry::default_instance_->InitAsDefaultInstance();
  Tree::default_instance_->InitAsDefaultInstance();
  Property::default_instance_->InitAsDefaultInstance();
  Properties::default_instance_->InitAsDefaultInstance();
  SecureProperties::default_instance_->InitAsDefaultInstance();
  Pbkdf2Key::default_instance_->InitAsDefaultInstance();
  PgpKey::default_instance_->InitAsDefaultInstance();
  EncryptedProperties::default_instance_->InitAsDefaultInstance();
  Manifest::default_instance_->InitAsDefaultInstance();
  Signature::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lyekka_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lyekka_2eproto {
  StaticDescriptorInitializer_lyekka_2eproto() {
    protobuf_AddDesc_lyekka_2eproto();
  }
} static_descriptor_initializer_lyekka_2eproto_;

const ::google::protobuf::EnumDescriptor* Encryption_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Encryption_descriptor_;
}
bool Encryption_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Compression_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Compression_descriptor_;
}
bool Compression_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TreeRef::kNameFieldNumber;
const int TreeRef::kModeFieldNumber;
const int TreeRef::kMtimeFieldNumber;
const int TreeRef::kMtimeNsFieldNumber;
const int TreeRef::kShaIdxFieldNumber;
const int TreeRef::kKeyFieldNumber;
#endif  // !_MSC_VER

TreeRef::TreeRef()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreeRef::InitAsDefaultInstance() {
}

TreeRef::TreeRef(const TreeRef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreeRef::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mode_ = 0;
  mtime_ = GOOGLE_LONGLONG(0);
  mtime_ns_ = 0;
  sha_idx_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreeRef::~TreeRef() {
  SharedDtor();
}

void TreeRef::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void TreeRef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreeRef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreeRef_descriptor_;
}

const TreeRef& TreeRef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lyekka_2eproto();  return *default_instance_;
}

TreeRef* TreeRef::default_instance_ = NULL;

TreeRef* TreeRef::New() const {
  return new TreeRef;
}

void TreeRef::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    mode_ = 0;
    mtime_ = GOOGLE_LONGLONG(0);
    mtime_ns_ = 0;
    sha_idx_ = 0;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreeRef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }
      
      // required int32 mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mtime;
        break;
      }
      
      // required int64 mtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mtime_)));
          set_has_mtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mtime_ns;
        break;
      }
      
      // optional int32 mtime_ns = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mtime_ns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mtime_ns_)));
          set_has_mtime_ns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sha_idx;
        break;
      }
      
      // required int32 sha_idx = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sha_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sha_idx_)));
          set_has_sha_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_key;
        break;
      }
      
      // optional bytes key = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((8000u <= tag && tag < 16000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TreeRef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required int32 mode = 2;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mode(), output);
  }
  
  // required int64 mtime = 3;
  if (has_mtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->mtime(), output);
  }
  
  // optional int32 mtime_ns = 4;
  if (has_mtime_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mtime_ns(), output);
  }
  
  // required int32 sha_idx = 5;
  if (has_sha_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sha_idx(), output);
  }
  
  // optional bytes key = 6;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->key(), output);
  }
  
  // Extension range [1000, 2000)
  _extensions_.SerializeWithCachedSizes(
      1000, 2000, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreeRef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required int32 mode = 2;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mode(), target);
  }
  
  // required int64 mtime = 3;
  if (has_mtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->mtime(), target);
  }
  
  // optional int32 mtime_ns = 4;
  if (has_mtime_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mtime_ns(), target);
  }
  
  // required int32 sha_idx = 5;
  if (has_sha_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sha_idx(), target);
  }
  
  // optional bytes key = 6;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->key(), target);
  }
  
  // Extension range [1000, 2000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 2000, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreeRef::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }
    
    // required int64 mtime = 3;
    if (has_mtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mtime());
    }
    
    // optional int32 mtime_ns = 4;
    if (has_mtime_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mtime_ns());
    }
    
    // required int32 sha_idx = 5;
    if (has_sha_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sha_idx());
    }
    
    // optional bytes key = 6;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreeRef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreeRef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreeRef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreeRef::MergeFrom(const TreeRef& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_mtime()) {
      set_mtime(from.mtime());
    }
    if (from.has_mtime_ns()) {
      set_mtime_ns(from.mtime_ns());
    }
    if (from.has_sha_idx()) {
      set_sha_idx(from.sha_idx());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreeRef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeRef::CopyFrom(const TreeRef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeRef::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;
  
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void TreeRef::Swap(TreeRef* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(mode_, other->mode_);
    std::swap(mtime_, other->mtime_);
    std::swap(mtime_ns_, other->mtime_ns_);
    std::swap(sha_idx_, other->sha_idx_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata TreeRef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreeRef_descriptor_;
  metadata.reflection = TreeRef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Part::kOffsetFieldNumber;
const int Part::kSizeFieldNumber;
const int Part::kShaIdxFieldNumber;
const int Part::kKeyFieldNumber;
const int Part::kCompressionFieldNumber;
#endif  // !_MSC_VER

Part::Part()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Part::InitAsDefaultInstance() {
}

Part::Part(const Part& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Part::SharedCtor() {
  _cached_size_ = 0;
  offset_ = GOOGLE_ULONGLONG(0);
  size_ = 0u;
  sha_idx_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  compression_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Part::~Part() {
  SharedDtor();
}

void Part::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void Part::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Part::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Part_descriptor_;
}

const Part& Part::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lyekka_2eproto();  return *default_instance_;
}

Part* Part::default_instance_ = NULL;

Part* Part::New() const {
  return new Part;
}

void Part::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    offset_ = GOOGLE_ULONGLONG(0);
    size_ = 0u;
    sha_idx_ = 0;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    compression_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Part::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 offset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }
      
      // required uint32 size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sha_idx;
        break;
      }
      
      // required int32 sha_idx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sha_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sha_idx_)));
          set_has_sha_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_key;
        break;
      }
      
      // optional bytes key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_compression;
        break;
      }
      
      // optional .Lyekka.pb.Compression compression = 5 [default = ZLIB];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compression:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (Lyekka::pb::Compression_IsValid(value)) {
            set_compression(static_cast< Lyekka::pb::Compression >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((8000u <= tag && tag < 16000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Part::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->offset(), output);
  }
  
  // required uint32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->size(), output);
  }
  
  // required int32 sha_idx = 3;
  if (has_sha_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sha_idx(), output);
  }
  
  // optional bytes key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->key(), output);
  }
  
  // optional .Lyekka.pb.Compression compression = 5 [default = ZLIB];
  if (has_compression()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->compression(), output);
  }
  
  // Extension range [1000, 2000)
  _extensions_.SerializeWithCachedSizes(
      1000, 2000, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Part::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->offset(), target);
  }
  
  // required uint32 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->size(), target);
  }
  
  // required int32 sha_idx = 3;
  if (has_sha_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sha_idx(), target);
  }
  
  // optional bytes key = 4;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->key(), target);
  }
  
  // optional .Lyekka.pb.Compression compression = 5 [default = ZLIB];
  if (has_compression()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->compression(), target);
  }
  
  // Extension range [1000, 2000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 2000, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Part::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offset());
    }
    
    // required uint32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }
    
    // required int32 sha_idx = 3;
    if (has_sha_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sha_idx());
    }
    
    // optional bytes key = 4;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }
    
    // optional .Lyekka.pb.Compression compression = 5 [default = ZLIB];
    if (has_compression()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->compression());
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Part::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Part* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Part*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Part::MergeFrom(const Part& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_sha_idx()) {
      set_sha_idx(from.sha_idx());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_compression()) {
      set_compression(from.compression());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Part::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Part::CopyFrom(const Part& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Part::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Part::Swap(Part* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(size_, other->size_);
    std::swap(sha_idx_, other->sha_idx_);
    std::swap(key_, other->key_);
    std::swap(compression_, other->compression_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata Part::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Part_descriptor_;
  metadata.reflection = Part_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileEntry::kNameFieldNumber;
const int FileEntry::kModeFieldNumber;
const int FileEntry::kSizeFieldNumber;
const int FileEntry::kMtimeFieldNumber;
const int FileEntry::kMtimeNsFieldNumber;
const int FileEntry::kPartsFieldNumber;
#endif  // !_MSC_VER

FileEntry::FileEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileEntry::InitAsDefaultInstance() {
}

FileEntry::FileEntry(const FileEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileEntry::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mode_ = 0;
  size_ = GOOGLE_ULONGLONG(0);
  mtime_ = GOOGLE_LONGLONG(0);
  mtime_ns_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileEntry::~FileEntry() {
  SharedDtor();
}

void FileEntry::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FileEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileEntry_descriptor_;
}

const FileEntry& FileEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lyekka_2eproto();  return *default_instance_;
}

FileEntry* FileEntry::default_instance_ = NULL;

FileEntry* FileEntry::New() const {
  return new FileEntry;
}

void FileEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    mode_ = 0;
    size_ = GOOGLE_ULONGLONG(0);
    mtime_ = GOOGLE_LONGLONG(0);
    mtime_ns_ = 0;
  }
  parts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }
      
      // required int32 mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_size;
        break;
      }
      
      // required uint64 size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mtime;
        break;
      }
      
      // required int64 mtime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mtime_)));
          set_has_mtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mtime_ns;
        break;
      }
      
      // optional int32 mtime_ns = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mtime_ns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mtime_ns_)));
          set_has_mtime_ns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_parts;
        break;
      }
      
      // repeated .Lyekka.pb.Part parts = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_parts;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required int32 mode = 2;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mode(), output);
  }
  
  // required uint64 size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->size(), output);
  }
  
  // required int64 mtime = 4;
  if (has_mtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->mtime(), output);
  }
  
  // optional int32 mtime_ns = 5;
  if (has_mtime_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mtime_ns(), output);
  }
  
  // repeated .Lyekka.pb.Part parts = 6;
  for (int i = 0; i < this->parts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->parts(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required int32 mode = 2;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mode(), target);
  }
  
  // required uint64 size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->size(), target);
  }
  
  // required int64 mtime = 4;
  if (has_mtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->mtime(), target);
  }
  
  // optional int32 mtime_ns = 5;
  if (has_mtime_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mtime_ns(), target);
  }
  
  // repeated .Lyekka.pb.Part parts = 6;
  for (int i = 0; i < this->parts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->parts(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileEntry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }
    
    // required uint64 size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }
    
    // required int64 mtime = 4;
    if (has_mtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mtime());
    }
    
    // optional int32 mtime_ns = 5;
    if (has_mtime_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mtime_ns());
    }
    
  }
  // repeated .Lyekka.pb.Part parts = 6;
  total_size += 1 * this->parts_size();
  for (int i = 0; i < this->parts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parts(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileEntry::MergeFrom(const FileEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  parts_.MergeFrom(from.parts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_mtime()) {
      set_mtime(from.mtime());
    }
    if (from.has_mtime_ns()) {
      set_mtime_ns(from.mtime_ns());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileEntry::CopyFrom(const FileEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  for (int i = 0; i < parts_size(); i++) {
    if (!this->parts(i).IsInitialized()) return false;
  }
  return true;
}

void FileEntry::Swap(FileEntry* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(mode_, other->mode_);
    std::swap(size_, other->size_);
    std::swap(mtime_, other->mtime_);
    std::swap(mtime_ns_, other->mtime_ns_);
    parts_.Swap(&other->parts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileEntry_descriptor_;
  metadata.reflection = FileEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Tree::kSubdirsFieldNumber;
const int Tree::kFilesFieldNumber;
#endif  // !_MSC_VER

Tree::Tree()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Tree::InitAsDefaultInstance() {
}

Tree::Tree(const Tree& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Tree::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tree::~Tree() {
  SharedDtor();
}

void Tree::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tree::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tree_descriptor_;
}

const Tree& Tree::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lyekka_2eproto();  return *default_instance_;
}

Tree* Tree::default_instance_ = NULL;

Tree* Tree::New() const {
  return new Tree;
}

void Tree::Clear() {
  subdirs_.Clear();
  files_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Lyekka.pb.TreeRef subdirs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subdirs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subdirs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_subdirs;
        if (input->ExpectTag(18)) goto parse_files;
        break;
      }
      
      // repeated .Lyekka.pb.FileEntry files = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_files()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_files;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Lyekka.pb.TreeRef subdirs = 1;
  for (int i = 0; i < this->subdirs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->subdirs(i), output);
  }
  
  // repeated .Lyekka.pb.FileEntry files = 2;
  for (int i = 0; i < this->files_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->files(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Tree::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Lyekka.pb.TreeRef subdirs = 1;
  for (int i = 0; i < this->subdirs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->subdirs(i), target);
  }
  
  // repeated .Lyekka.pb.FileEntry files = 2;
  for (int i = 0; i < this->files_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->files(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Tree::ByteSize() const {
  int total_size = 0;
  
  // repeated .Lyekka.pb.TreeRef subdirs = 1;
  total_size += 1 * this->subdirs_size();
  for (int i = 0; i < this->subdirs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subdirs(i));
  }
  
  // repeated .Lyekka.pb.FileEntry files = 2;
  total_size += 1 * this->files_size();
  for (int i = 0; i < this->files_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->files(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tree::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tree* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tree*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tree::MergeFrom(const Tree& from) {
  GOOGLE_CHECK_NE(&from, this);
  subdirs_.MergeFrom(from.subdirs_);
  files_.MergeFrom(from.files_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tree::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tree::CopyFrom(const Tree& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tree::IsInitialized() const {
  
  for (int i = 0; i < subdirs_size(); i++) {
    if (!this->subdirs(i).IsInitialized()) return false;
  }
  for (int i = 0; i < files_size(); i++) {
    if (!this->files(i).IsInitialized()) return false;
  }
  return true;
}

void Tree::Swap(Tree* other) {
  if (other != this) {
    subdirs_.Swap(&other->subdirs_);
    files_.Swap(&other->files_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tree::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tree_descriptor_;
  metadata.reflection = Tree_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Property::kKeyFieldNumber;
const int Property::kStrValFieldNumber;
#endif  // !_MSC_VER

Property::Property()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Property::InitAsDefaultInstance() {
}

Property::Property(const Property& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Property::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  str_val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Property::~Property() {
  SharedDtor();
}

void Property::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (str_val_ != &::google::protobuf::internal::kEmptyString) {
    delete str_val_;
  }
  if (this != default_instance_) {
  }
}

void Property::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Property::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Property_descriptor_;
}

const Property& Property::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lyekka_2eproto();  return *default_instance_;
}

Property* Property::default_instance_ = NULL;

Property* Property::New() const {
  return new Property;
}

void Property::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_str_val()) {
      if (str_val_ != &::google::protobuf::internal::kEmptyString) {
        str_val_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Property::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_str_val;
        break;
      }
      
      // optional string str_val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_val()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_val().data(), this->str_val().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Property::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }
  
  // optional string str_val = 2;
  if (has_str_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_val().data(), this->str_val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->str_val(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Property::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }
  
  // optional string str_val = 2;
  if (has_str_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_val().data(), this->str_val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->str_val(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Property::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // optional string str_val = 2;
    if (has_str_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_val());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Property::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Property* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Property*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Property::MergeFrom(const Property& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_str_val()) {
      set_str_val(from.str_val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Property::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Property::CopyFrom(const Property& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Property::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Property::Swap(Property* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(str_val_, other->str_val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Property::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Property_descriptor_;
  metadata.reflection = Property_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Properties::kPropertiesFieldNumber;
#endif  // !_MSC_VER

Properties::Properties()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Properties::InitAsDefaultInstance() {
}

Properties::Properties(const Properties& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Properties::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Properties::~Properties() {
  SharedDtor();
}

void Properties::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Properties::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Properties::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Properties_descriptor_;
}

const Properties& Properties::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lyekka_2eproto();  return *default_instance_;
}

Properties* Properties::default_instance_ = NULL;

Properties* Properties::New() const {
  return new Properties;
}

void Properties::Clear() {
  properties_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Properties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Lyekka.pb.Property properties = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_properties;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Properties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Lyekka.pb.Property properties = 1;
  for (int i = 0; i < this->properties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->properties(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Properties::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Lyekka.pb.Property properties = 1;
  for (int i = 0; i < this->properties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->properties(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Properties::ByteSize() const {
  int total_size = 0;
  
  // repeated .Lyekka.pb.Property properties = 1;
  total_size += 1 * this->properties_size();
  for (int i = 0; i < this->properties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->properties(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Properties::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Properties* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Properties*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Properties::MergeFrom(const Properties& from) {
  GOOGLE_CHECK_NE(&from, this);
  properties_.MergeFrom(from.properties_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Properties::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Properties::CopyFrom(const Properties& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Properties::IsInitialized() const {
  
  for (int i = 0; i < properties_size(); i++) {
    if (!this->properties(i).IsInitialized()) return false;
  }
  return true;
}

void Properties::Swap(Properties* other) {
  if (other != this) {
    properties_.Swap(&other->properties_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Properties::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Properties_descriptor_;
  metadata.reflection = Properties_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SecureProperties::kPropertiesFieldNumber;
const int SecureProperties::kEntryPointKeyFieldNumber;
#endif  // !_MSC_VER

SecureProperties::SecureProperties()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SecureProperties::InitAsDefaultInstance() {
}

SecureProperties::SecureProperties(const SecureProperties& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SecureProperties::SharedCtor() {
  _cached_size_ = 0;
  entry_point_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecureProperties::~SecureProperties() {
  SharedDtor();
}

void SecureProperties::SharedDtor() {
  if (entry_point_key_ != &::google::protobuf::internal::kEmptyString) {
    delete entry_point_key_;
  }
  if (this != default_instance_) {
  }
}

void SecureProperties::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecureProperties::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecureProperties_descriptor_;
}

const SecureProperties& SecureProperties::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lyekka_2eproto();  return *default_instance_;
}

SecureProperties* SecureProperties::default_instance_ = NULL;

SecureProperties* SecureProperties::New() const {
  return new SecureProperties;
}

void SecureProperties::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_entry_point_key()) {
      if (entry_point_key_ != &::google::protobuf::internal::kEmptyString) {
        entry_point_key_->clear();
      }
    }
  }
  properties_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SecureProperties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Lyekka.pb.Property properties = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_properties;
        if (input->ExpectTag(18)) goto parse_entry_point_key;
        break;
      }
      
      // optional bytes entry_point_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entry_point_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_entry_point_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SecureProperties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Lyekka.pb.Property properties = 1;
  for (int i = 0; i < this->properties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->properties(i), output);
  }
  
  // optional bytes entry_point_key = 2;
  if (has_entry_point_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->entry_point_key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SecureProperties::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Lyekka.pb.Property properties = 1;
  for (int i = 0; i < this->properties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->properties(i), target);
  }
  
  // optional bytes entry_point_key = 2;
  if (has_entry_point_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->entry_point_key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SecureProperties::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes entry_point_key = 2;
    if (has_entry_point_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->entry_point_key());
    }
    
  }
  // repeated .Lyekka.pb.Property properties = 1;
  total_size += 1 * this->properties_size();
  for (int i = 0; i < this->properties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->properties(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecureProperties::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SecureProperties* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SecureProperties*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SecureProperties::MergeFrom(const SecureProperties& from) {
  GOOGLE_CHECK_NE(&from, this);
  properties_.MergeFrom(from.properties_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_entry_point_key()) {
      set_entry_point_key(from.entry_point_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SecureProperties::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecureProperties::CopyFrom(const SecureProperties& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureProperties::IsInitialized() const {
  
  for (int i = 0; i < properties_size(); i++) {
    if (!this->properties(i).IsInitialized()) return false;
  }
  return true;
}

void SecureProperties::Swap(SecureProperties* other) {
  if (other != this) {
    properties_.Swap(&other->properties_);
    std::swap(entry_point_key_, other->entry_point_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SecureProperties::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecureProperties_descriptor_;
  metadata.reflection = SecureProperties_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pbkdf2Key::kSaltFieldNumber;
const int Pbkdf2Key::kIterationsFieldNumber;
const int Pbkdf2Key::kIvFieldNumber;
const int Pbkdf2Key::kKeyFieldNumber;
#endif  // !_MSC_VER

Pbkdf2Key::Pbkdf2Key()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pbkdf2Key::InitAsDefaultInstance() {
}

Pbkdf2Key::Pbkdf2Key(const Pbkdf2Key& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pbkdf2Key::SharedCtor() {
  _cached_size_ = 0;
  salt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iterations_ = 4096;
  iv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pbkdf2Key::~Pbkdf2Key() {
  SharedDtor();
}

void Pbkdf2Key::SharedDtor() {
  if (salt_ != &::google::protobuf::internal::kEmptyString) {
    delete salt_;
  }
  if (iv_ != &::google::protobuf::internal::kEmptyString) {
    delete iv_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void Pbkdf2Key::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pbkdf2Key::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pbkdf2Key_descriptor_;
}

const Pbkdf2Key& Pbkdf2Key::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lyekka_2eproto();  return *default_instance_;
}

Pbkdf2Key* Pbkdf2Key::default_instance_ = NULL;

Pbkdf2Key* Pbkdf2Key::New() const {
  return new Pbkdf2Key;
}

void Pbkdf2Key::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_salt()) {
      if (salt_ != &::google::protobuf::internal::kEmptyString) {
        salt_->clear();
      }
    }
    iterations_ = 4096;
    if (has_iv()) {
      if (iv_ != &::google::protobuf::internal::kEmptyString) {
        iv_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pbkdf2Key::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes salt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_salt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iterations;
        break;
      }
      
      // optional int32 iterations = 2 [default = 4096];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iterations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iterations_)));
          set_has_iterations();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_iv;
        break;
      }
      
      // required bytes iv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_iv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_iv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_key;
        break;
      }
      
      // required bytes key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pbkdf2Key::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes salt = 1;
  if (has_salt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->salt(), output);
  }
  
  // optional int32 iterations = 2 [default = 4096];
  if (has_iterations()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iterations(), output);
  }
  
  // required bytes iv = 3;
  if (has_iv()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->iv(), output);
  }
  
  // required bytes key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pbkdf2Key::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes salt = 1;
  if (has_salt()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->salt(), target);
  }
  
  // optional int32 iterations = 2 [default = 4096];
  if (has_iterations()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iterations(), target);
  }
  
  // required bytes iv = 3;
  if (has_iv()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->iv(), target);
  }
  
  // required bytes key = 4;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pbkdf2Key::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes salt = 1;
    if (has_salt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->salt());
    }
    
    // optional int32 iterations = 2 [default = 4096];
    if (has_iterations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iterations());
    }
    
    // required bytes iv = 3;
    if (has_iv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->iv());
    }
    
    // required bytes key = 4;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pbkdf2Key::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pbkdf2Key* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pbkdf2Key*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pbkdf2Key::MergeFrom(const Pbkdf2Key& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_salt()) {
      set_salt(from.salt());
    }
    if (from.has_iterations()) {
      set_iterations(from.iterations());
    }
    if (from.has_iv()) {
      set_iv(from.iv());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pbkdf2Key::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pbkdf2Key::CopyFrom(const Pbkdf2Key& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pbkdf2Key::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  
  return true;
}

void Pbkdf2Key::Swap(Pbkdf2Key* other) {
  if (other != this) {
    std::swap(salt_, other->salt_);
    std::swap(iterations_, other->iterations_);
    std::swap(iv_, other->iv_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pbkdf2Key::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pbkdf2Key_descriptor_;
  metadata.reflection = Pbkdf2Key_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PgpKey::kKeyIdFieldNumber;
const int PgpKey::kEncryptedKeyFieldNumber;
#endif  // !_MSC_VER

PgpKey::PgpKey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PgpKey::InitAsDefaultInstance() {
}

PgpKey::PgpKey(const PgpKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PgpKey::SharedCtor() {
  _cached_size_ = 0;
  key_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encrypted_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PgpKey::~PgpKey() {
  SharedDtor();
}

void PgpKey::SharedDtor() {
  if (key_id_ != &::google::protobuf::internal::kEmptyString) {
    delete key_id_;
  }
  if (encrypted_key_ != &::google::protobuf::internal::kEmptyString) {
    delete encrypted_key_;
  }
  if (this != default_instance_) {
  }
}

void PgpKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PgpKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PgpKey_descriptor_;
}

const PgpKey& PgpKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lyekka_2eproto();  return *default_instance_;
}

PgpKey* PgpKey::default_instance_ = NULL;

PgpKey* PgpKey::New() const {
  return new PgpKey;
}

void PgpKey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key_id()) {
      if (key_id_ != &::google::protobuf::internal::kEmptyString) {
        key_id_->clear();
      }
    }
    if (has_encrypted_key()) {
      if (encrypted_key_ != &::google::protobuf::internal::kEmptyString) {
        encrypted_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PgpKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key_id().data(), this->key_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_encrypted_key;
        break;
      }
      
      // required bytes encrypted_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encrypted_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encrypted_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PgpKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string key_id = 1;
  if (has_key_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key_id().data(), this->key_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key_id(), output);
  }
  
  // required bytes encrypted_key = 2;
  if (has_encrypted_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->encrypted_key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PgpKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string key_id = 1;
  if (has_key_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key_id().data(), this->key_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key_id(), target);
  }
  
  // required bytes encrypted_key = 2;
  if (has_encrypted_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->encrypted_key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PgpKey::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key_id = 1;
    if (has_key_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key_id());
    }
    
    // required bytes encrypted_key = 2;
    if (has_encrypted_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encrypted_key());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PgpKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PgpKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PgpKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PgpKey::MergeFrom(const PgpKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key_id()) {
      set_key_id(from.key_id());
    }
    if (from.has_encrypted_key()) {
      set_encrypted_key(from.encrypted_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PgpKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PgpKey::CopyFrom(const PgpKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PgpKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void PgpKey::Swap(PgpKey* other) {
  if (other != this) {
    std::swap(key_id_, other->key_id_);
    std::swap(encrypted_key_, other->encrypted_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PgpKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PgpKey_descriptor_;
  metadata.reflection = PgpKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EncryptedProperties::kEncryptedDataFieldNumber;
const int EncryptedProperties::kIvFieldNumber;
const int EncryptedProperties::kAlgorithmFieldNumber;
const int EncryptedProperties::kPasswordKeyFieldNumber;
const int EncryptedProperties::kPgpEncryptedKeyFieldNumber;
#endif  // !_MSC_VER

EncryptedProperties::EncryptedProperties()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EncryptedProperties::InitAsDefaultInstance() {
  password_key_ = const_cast< ::Lyekka::pb::Pbkdf2Key*>(&::Lyekka::pb::Pbkdf2Key::default_instance());
  pgp_encrypted_key_ = const_cast< ::Lyekka::pb::PgpKey*>(&::Lyekka::pb::PgpKey::default_instance());
}

EncryptedProperties::EncryptedProperties(const EncryptedProperties& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EncryptedProperties::SharedCtor() {
  _cached_size_ = 0;
  encrypted_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  algorithm_ = 1;
  password_key_ = NULL;
  pgp_encrypted_key_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EncryptedProperties::~EncryptedProperties() {
  SharedDtor();
}

void EncryptedProperties::SharedDtor() {
  if (encrypted_data_ != &::google::protobuf::internal::kEmptyString) {
    delete encrypted_data_;
  }
  if (iv_ != &::google::protobuf::internal::kEmptyString) {
    delete iv_;
  }
  if (this != default_instance_) {
    delete password_key_;
    delete pgp_encrypted_key_;
  }
}

void EncryptedProperties::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EncryptedProperties::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EncryptedProperties_descriptor_;
}

const EncryptedProperties& EncryptedProperties::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lyekka_2eproto();  return *default_instance_;
}

EncryptedProperties* EncryptedProperties::default_instance_ = NULL;

EncryptedProperties* EncryptedProperties::New() const {
  return new EncryptedProperties;
}

void EncryptedProperties::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_encrypted_data()) {
      if (encrypted_data_ != &::google::protobuf::internal::kEmptyString) {
        encrypted_data_->clear();
      }
    }
    if (has_iv()) {
      if (iv_ != &::google::protobuf::internal::kEmptyString) {
        iv_->clear();
      }
    }
    algorithm_ = 1;
    if (has_password_key()) {
      if (password_key_ != NULL) password_key_->::Lyekka::pb::Pbkdf2Key::Clear();
    }
    if (has_pgp_encrypted_key()) {
      if (pgp_encrypted_key_ != NULL) pgp_encrypted_key_->::Lyekka::pb::PgpKey::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EncryptedProperties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes encrypted_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encrypted_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_iv;
        break;
      }
      
      // required bytes iv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_iv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_iv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_algorithm;
        break;
      }
      
      // optional .Lyekka.pb.Encryption algorithm = 3 [default = AES_128_CBC];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_algorithm:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (Lyekka::pb::Encryption_IsValid(value)) {
            set_algorithm(static_cast< Lyekka::pb::Encryption >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_password_key;
        break;
      }
      
      // optional .Lyekka.pb.Pbkdf2Key password_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_password_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pgp_encrypted_key;
        break;
      }
      
      // optional .Lyekka.pb.PgpKey pgp_encrypted_key = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pgp_encrypted_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pgp_encrypted_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EncryptedProperties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes encrypted_data = 1;
  if (has_encrypted_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->encrypted_data(), output);
  }
  
  // required bytes iv = 2;
  if (has_iv()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->iv(), output);
  }
  
  // optional .Lyekka.pb.Encryption algorithm = 3 [default = AES_128_CBC];
  if (has_algorithm()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->algorithm(), output);
  }
  
  // optional .Lyekka.pb.Pbkdf2Key password_key = 4;
  if (has_password_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->password_key(), output);
  }
  
  // optional .Lyekka.pb.PgpKey pgp_encrypted_key = 5;
  if (has_pgp_encrypted_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pgp_encrypted_key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EncryptedProperties::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes encrypted_data = 1;
  if (has_encrypted_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->encrypted_data(), target);
  }
  
  // required bytes iv = 2;
  if (has_iv()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->iv(), target);
  }
  
  // optional .Lyekka.pb.Encryption algorithm = 3 [default = AES_128_CBC];
  if (has_algorithm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->algorithm(), target);
  }
  
  // optional .Lyekka.pb.Pbkdf2Key password_key = 4;
  if (has_password_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->password_key(), target);
  }
  
  // optional .Lyekka.pb.PgpKey pgp_encrypted_key = 5;
  if (has_pgp_encrypted_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pgp_encrypted_key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EncryptedProperties::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes encrypted_data = 1;
    if (has_encrypted_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encrypted_data());
    }
    
    // required bytes iv = 2;
    if (has_iv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->iv());
    }
    
    // optional .Lyekka.pb.Encryption algorithm = 3 [default = AES_128_CBC];
    if (has_algorithm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->algorithm());
    }
    
    // optional .Lyekka.pb.Pbkdf2Key password_key = 4;
    if (has_password_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->password_key());
    }
    
    // optional .Lyekka.pb.PgpKey pgp_encrypted_key = 5;
    if (has_pgp_encrypted_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pgp_encrypted_key());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EncryptedProperties::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EncryptedProperties* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EncryptedProperties*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EncryptedProperties::MergeFrom(const EncryptedProperties& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_encrypted_data()) {
      set_encrypted_data(from.encrypted_data());
    }
    if (from.has_iv()) {
      set_iv(from.iv());
    }
    if (from.has_algorithm()) {
      set_algorithm(from.algorithm());
    }
    if (from.has_password_key()) {
      mutable_password_key()->::Lyekka::pb::Pbkdf2Key::MergeFrom(from.password_key());
    }
    if (from.has_pgp_encrypted_key()) {
      mutable_pgp_encrypted_key()->::Lyekka::pb::PgpKey::MergeFrom(from.pgp_encrypted_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EncryptedProperties::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncryptedProperties::CopyFrom(const EncryptedProperties& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptedProperties::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_password_key()) {
    if (!this->password_key().IsInitialized()) return false;
  }
  if (has_pgp_encrypted_key()) {
    if (!this->pgp_encrypted_key().IsInitialized()) return false;
  }
  return true;
}

void EncryptedProperties::Swap(EncryptedProperties* other) {
  if (other != this) {
    std::swap(encrypted_data_, other->encrypted_data_);
    std::swap(iv_, other->iv_);
    std::swap(algorithm_, other->algorithm_);
    std::swap(password_key_, other->password_key_);
    std::swap(pgp_encrypted_key_, other->pgp_encrypted_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EncryptedProperties::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EncryptedProperties_descriptor_;
  metadata.reflection = EncryptedProperties_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Manifest::kPropertiesFieldNumber;
const int Manifest::kSecurePropertiesFieldNumber;
#endif  // !_MSC_VER

Manifest::Manifest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Manifest::InitAsDefaultInstance() {
  properties_ = const_cast< ::Lyekka::pb::Properties*>(&::Lyekka::pb::Properties::default_instance());
  secure_properties_ = const_cast< ::Lyekka::pb::EncryptedProperties*>(&::Lyekka::pb::EncryptedProperties::default_instance());
}

Manifest::Manifest(const Manifest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Manifest::SharedCtor() {
  _cached_size_ = 0;
  properties_ = NULL;
  secure_properties_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Manifest::~Manifest() {
  SharedDtor();
}

void Manifest::SharedDtor() {
  if (this != default_instance_) {
    delete properties_;
    delete secure_properties_;
  }
}

void Manifest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Manifest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Manifest_descriptor_;
}

const Manifest& Manifest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lyekka_2eproto();  return *default_instance_;
}

Manifest* Manifest::default_instance_ = NULL;

Manifest* Manifest::New() const {
  return new Manifest;
}

void Manifest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_properties()) {
      if (properties_ != NULL) properties_->::Lyekka::pb::Properties::Clear();
    }
    if (has_secure_properties()) {
      if (secure_properties_ != NULL) secure_properties_->::Lyekka::pb::EncryptedProperties::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Manifest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Lyekka.pb.Properties properties = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_secure_properties;
        break;
      }
      
      // optional .Lyekka.pb.EncryptedProperties secure_properties = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_secure_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_secure_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Manifest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Lyekka.pb.Properties properties = 1;
  if (has_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->properties(), output);
  }
  
  // optional .Lyekka.pb.EncryptedProperties secure_properties = 2;
  if (has_secure_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->secure_properties(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Manifest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Lyekka.pb.Properties properties = 1;
  if (has_properties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->properties(), target);
  }
  
  // optional .Lyekka.pb.EncryptedProperties secure_properties = 2;
  if (has_secure_properties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->secure_properties(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Manifest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Lyekka.pb.Properties properties = 1;
    if (has_properties()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->properties());
    }
    
    // optional .Lyekka.pb.EncryptedProperties secure_properties = 2;
    if (has_secure_properties()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->secure_properties());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Manifest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Manifest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Manifest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Manifest::MergeFrom(const Manifest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_properties()) {
      mutable_properties()->::Lyekka::pb::Properties::MergeFrom(from.properties());
    }
    if (from.has_secure_properties()) {
      mutable_secure_properties()->::Lyekka::pb::EncryptedProperties::MergeFrom(from.secure_properties());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Manifest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Manifest::CopyFrom(const Manifest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Manifest::IsInitialized() const {
  
  if (has_properties()) {
    if (!this->properties().IsInitialized()) return false;
  }
  if (has_secure_properties()) {
    if (!this->secure_properties().IsInitialized()) return false;
  }
  return true;
}

void Manifest::Swap(Manifest* other) {
  if (other != this) {
    std::swap(properties_, other->properties_);
    std::swap(secure_properties_, other->secure_properties_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Manifest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Manifest_descriptor_;
  metadata.reflection = Manifest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Signature::kSignatureFieldNumber;
#endif  // !_MSC_VER

Signature::Signature()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Signature::InitAsDefaultInstance() {
}

Signature::Signature(const Signature& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Signature::SharedCtor() {
  _cached_size_ = 0;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Signature::~Signature() {
  SharedDtor();
}

void Signature::SharedDtor() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void Signature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Signature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Signature_descriptor_;
}

const Signature& Signature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lyekka_2eproto();  return *default_instance_;
}

Signature* Signature::default_instance_ = NULL;

Signature* Signature::New() const {
  return new Signature;
}

void Signature::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Signature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes signature = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Signature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes signature = 1;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->signature(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Signature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes signature = 1;
  if (has_signature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->signature(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Signature::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes signature = 1;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Signature::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Signature* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Signature*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Signature::MergeFrom(const Signature& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signature()) {
      set_signature(from.signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Signature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signature::CopyFrom(const Signature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signature::IsInitialized() const {
  
  return true;
}

void Signature::Swap(Signature* other) {
  if (other != this) {
    std::swap(signature_, other->signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Signature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Signature_descriptor_;
  metadata.reflection = Signature_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace Lyekka

// @@protoc_insertion_point(global_scope)
